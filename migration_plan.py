
migration_plan = {
    "tasks": [
        {
            "id": "completed_001",
            "title": "CRDTAGY1 → CreditAgencyService",
            "content": "Credit agency program migrated to Spring Boot service with random delay simulation and credit score generation (1-999)",
            "status": "completed",
            "depends_on": [],
            "action": "Already migrated - CreditAgencyService.java implements CRDTAGY1 functionality",
            "definition_of_done": "Service implemented with credit score generation and customer record updates",
            "validation_mechanism": "Existing unit and integration tests in ErrorLoggingServiceTest.java pattern",
            "estimated_hours": 8,
            "deliverables": ["CreditAgencyService.java", "CreditAgencyController.java"]
        },
        {
            "id": "completed_002",
            "title": "GETCOMPY → CompanyInfoService",
            "content": "Company information retrieval migrated to Spring Boot service returning fixed company name",
            "status": "completed",
            "depends_on": [],
            "action": "Already migrated - CompanyInfoService.java returns company details",
            "definition_of_done": "Service returns fixed company information",
            "validation_mechanism": "Service layer tests with mocked dependencies",
            "estimated_hours": 4,
            "deliverables": ["CompanyInfoService.java"]
        },
        {
            "id": "completed_003",
            "title": "GETSCODE → SortCodeService",
            "content": "Sort code retrieval migrated to Spring Boot service",
            "status": "completed",
            "depends_on": [],
            "action": "Already migrated - SortCodeService.java handles sort code operations",
            "definition_of_done": "Service provides sort code functionality",
            "validation_mechanism": "Unit tests with coverage requirements met",
            "estimated_hours": 4,
            "deliverables": ["SortCodeService.java"]
        },
        {
            "id": "completed_004",
            "title": "ABNDPROC → ErrorLoggingService",
            "content": "Error handling and logging migrated to Spring Boot service with application_error table integration",
            "status": "completed",
            "depends_on": [],
            "action": "Already migrated - ErrorLoggingService.java with ApplicationErrorRepository",
            "definition_of_done": "Error logging functional with database persistence",
            "validation_mechanism": "ErrorLoggingServiceTest.java with 135 lines of unit and integration tests",
            "estimated_hours": 6,
            "deliverables": ["ErrorLoggingService.java", "ApplicationErrorRepository.java", "ErrorLoggingServiceTest.java"]
        },
        {
            "id": "completed_005",
            "title": "BANKDATA → BankDataGenerator",
            "content": "Bank data generation and initialization migrated to Spring Boot command-line runner",
            "status": "completed",
            "depends_on": [],
            "action": "Already migrated - BankDataGenerator.java and DataGeneratorCommand.java",
            "definition_of_done": "Data generation script operational for test data",
            "validation_mechanism": "Manual execution verification and database population checks",
            "estimated_hours": 6,
            "deliverables": ["BankDataGenerator.java", "DataGeneratorCommand.java"]
        },
        
        {
            "id": "completed_006",
            "title": "BNKMENU - Main Menu UI",
            "content": "3270 terminal menu program - upstream dependency for business logic programs",
            "status": "completed",
            "depends_on": [],
            "action": "UI program replaced by REST API architecture - no direct migration needed",
            "definition_of_done": "Business logic extracted and identified for REST controller implementation",
            "validation_mechanism": "REST endpoints provide equivalent functionality via Spring Boot controllers",
            "estimated_hours": 0,
            "deliverables": ["REST API replaces BMS UI"]
        },
        {
            "id": "completed_007",
            "title": "BNK1CAC - Create Account UI",
            "content": "3270 terminal UI for account creation - calls CREACC for business logic",
            "status": "completed",
            "depends_on": [],
            "action": "UI program replaced by REST API - validation logic extracted for controller layer",
            "definition_of_done": "CREACC business logic identified as migration target",
            "validation_mechanism": "REST controller implements validation, delegates to CREACC service",
            "estimated_hours": 0,
            "deliverables": ["AccountController with validation"]
        },
        {
            "id": "completed_008",
            "title": "BNK1CCA - Create Customer UI",
            "content": "3270 terminal UI for customer creation - calls CRECUST for business logic",
            "status": "completed",
            "depends_on": [],
            "action": "UI program replaced by REST API - validation logic extracted for controller layer",
            "definition_of_done": "CRECUST business logic identified as migration target",
            "validation_mechanism": "REST controller implements validation, delegates to CRECUST service",
            "estimated_hours": 0,
            "deliverables": ["CustomerController with validation"]
        },
        {
            "id": "completed_009",
            "title": "BNK1CCS - Sort Code UI",
            "content": "3270 terminal UI for sort code operations",
            "status": "completed",
            "depends_on": [],
            "action": "UI program replaced by REST API - functionality covered by SortCodeService",
            "definition_of_done": "Sort code operations available via REST endpoints",
            "validation_mechanism": "Existing SortCodeService provides functionality",
            "estimated_hours": 0,
            "deliverables": ["SortCodeService already migrated"]
        },
        {
            "id": "completed_010",
            "title": "BNK1CRA - Credit Agency UI",
            "content": "3270 terminal UI for credit agency operations - calls CRDTAGY programs",
            "status": "completed",
            "depends_on": [],
            "action": "UI program replaced by REST API - CRDTAGY1 migrated, CRDTAGY2-5 pending",
            "definition_of_done": "Credit agency operations available via REST endpoints",
            "validation_mechanism": "CreditAgencyService provides core functionality",
            "estimated_hours": 0,
            "deliverables": ["CreditAgencyController"]
        },
        {
            "id": "completed_011",
            "title": "BNK1DAC - Delete Account UI",
            "content": "3270 terminal UI for account deletion - calls DELACC for business logic",
            "status": "completed",
            "depends_on": [],
            "action": "UI program replaced by REST API - validation logic extracted for controller layer",
            "definition_of_done": "DELACC business logic identified as migration target",
            "validation_mechanism": "REST controller implements validation, delegates to DELACC service",
            "estimated_hours": 0,
            "deliverables": ["AccountController with delete endpoint"]
        },
        {
            "id": "completed_012",
            "title": "BNK1DCS - Delete Customer UI",
            "content": "3270 terminal UI for customer deletion - calls DELCUS for business logic",
            "status": "completed",
            "depends_on": [],
            "action": "UI program replaced by REST API - validation logic extracted for controller layer",
            "definition_of_done": "DELCUS business logic identified as migration target",
            "validation_mechanism": "REST controller implements validation, delegates to DELCUS service",
            "estimated_hours": 0,
            "deliverables": ["CustomerController with delete endpoint"]
        },
        {
            "id": "completed_013",
            "title": "BNK1TFN - Transfer Funds UI",
            "content": "3270 terminal UI for fund transfers - calls XFRFUN for business logic",
            "status": "completed",
            "depends_on": [],
            "action": "UI program replaced by REST API - validation logic extracted for controller layer",
            "definition_of_done": "XFRFUN business logic identified as migration target",
            "validation_mechanism": "REST controller implements validation, delegates to XFRFUN service",
            "estimated_hours": 0,
            "deliverables": ["TransactionController with transfer endpoint"]
        },
        {
            "id": "completed_014",
            "title": "BNK1UAC - Update Account UI",
            "content": "3270 terminal UI for account updates - calls UPDACC for business logic",
            "status": "completed",
            "depends_on": [],
            "action": "UI program replaced by REST API - validation logic extracted for controller layer",
            "definition_of_done": "UPDACC business logic identified as migration target",
            "validation_mechanism": "REST controller implements validation, delegates to UPDACC service",
            "estimated_hours": 0,
            "deliverables": ["AccountController with update endpoint"]
        },
        
        {
            "id": "setup_001",
            "title": "Establish Performance Baseline",
            "content": "Measure legacy COBOL system performance metrics for all 14 remaining programs to establish comparison baseline for migrated services",
            "status": "pending",
            "depends_on": [],
            "action": "Execute load tests against CICS COBOL programs (INQCUST, CRECUST, UPDCUST, DELCUS, CREACC, DELACC, INQACC, INQACCCU, UPDACC, DBCRFUN, XFRFUN, CRDTAGY2-5) and record P50/P95/P99 latencies, throughput, and error rates.",
            "definition_of_done": "Performance baseline documented for all 14 programs with specific latency numbers (P50/P95/P99), throughput metrics, and error rates under various load conditions",
            "validation_mechanism": "Baseline metrics report with concrete numbers for each program, load test scripts archived, metrics exportable for comparison",
            "estimated_hours": 10,
            "deliverables": ["docs/baseline_metrics.md", "tests/performance/baseline_data.json", "tests/performance/load_test_scripts/"]
        },
        {
            "id": "setup_002",
            "title": "Setup Target Monitoring and Observability",
            "content": "Deploy comprehensive monitoring stack for Spring Boot application to track performance, errors, and test execution metrics",
            "status": "pending",
            "depends_on": [],
            "action": "Configure Spring Boot Actuator with Prometheus metrics export, set up Grafana dashboards for service/repository/controller layer metrics, configure alerting for coverage thresholds and test failures.",
            "definition_of_done": "Monitoring operational with live dashboards showing JaCoCo coverage by layer, test execution metrics, service performance, and database query performance",
            "validation_mechanism": "Dashboards accessible and showing live data, alerts firing on threshold violations, metrics retention configured for 30+ days",
            "estimated_hours": 8,
            "deliverables": ["config/prometheus.yml", "config/grafana-dashboards.json", "docs/MONITORING.md"]
        },
        
        {
            "id": "validator_001",
            "title": "Create Customer Read Test Suite",
            "content": "Build comprehensive test suite for INQCUST customer inquiry operations following existing ErrorLoggingServiceTest.java pattern with unit and integration tests",
            "status": "pending",
            "depends_on": ["setup_002"],
            "action": "Create CustomerReadServiceTest.java with unit tests (@ExtendWith(MockitoExtension.class)) covering all query paths, error handling, and edge cases. Add integration tests (@SpringBootTest, @Sql) for database reads with H2. Target 90%+ branch coverage per JaCoCo requirements.",
            "definition_of_done": "Test suite covers all INQCUST read scenarios including: customer lookup by sort_code + customer_number, not found handling, database connection errors, retry logic, VSAM/DB2 dual-read simulation, NCS pointer operations. JaCoCo reports 90%+ branch coverage for read operations.",
            "validation_mechanism": "JaCoCo coverage report shows 90%+ branch coverage, all tests pass with mvn test, integration tests verify H2 schema compatibility, mock scenarios cover error conditions",
            "estimated_hours": 10,
            "deliverables": ["src/test/java/com/cbsa/migration/service/CustomerReadServiceTest.java", "src/test/resources/fixtures/customer_read_fixtures.json", "src/test/resources/db/customer_test_data.sql"]
        },
        {
            "id": "validator_002",
            "title": "Create Customer CRUD Test Suite",
            "content": "Build comprehensive test suite for CRECUST, UPDCUST, DELCUS operations with focus on transaction integrity, async operations, and date validation rules",
            "status": "pending",
            "depends_on": ["validator_001"],
            "action": "Create CustomerCrudServiceTest.java extending read test patterns. Cover CRECUST's async credit checks, named counter management, DB2 SQL integration. Test UPDCUST's limited field modification. Test DELCUS deletion with referential integrity. Include date validation tests (min year 1601, max age 150, future date rejection with fail codes 'O' and 'Y').",
            "definition_of_done": "All CRUD paths tested with 95%+ coverage including: customer creation with credit score async calls, field update restrictions, deletion with FK constraints, transaction rollback scenarios, concurrent access handling, date validation edge cases (year 1601 boundary, 150 year age limit, future dates).",
            "validation_mechanism": "JaCoCo shows 95%+ coverage, transaction tests verify @Transactional rollback, concurrent access tests prevent race conditions, date validation tests cover all edge cases from COBOL DATE-OF-BIRTH-CHECK sections",
            "estimated_hours": 12,
            "deliverables": ["src/test/java/com/cbsa/migration/service/CustomerCrudServiceTest.java", "src/test/resources/fixtures/customer_crud_fixtures.json", "src/test/resources/db/transaction_test_scenarios.sql"]
        },
        {
            "id": "validator_003",
            "title": "Create Account Read Test Suite",
            "content": "Build test suite for INQACC (single account inquiry) and INQACCCU (customer accounts inquiry) operations",
            "status": "pending",
            "depends_on": ["setup_002"],
            "action": "Create AccountReadServiceTest.java with unit and integration tests. Cover INQACC single account lookup by sort_code + account_number. Cover INQACCCU multiple account retrieval for customer with pagination. Test account type handling, balance calculations, rate retrieval.",
            "definition_of_done": "Test suite covers all account read scenarios: single account lookup, customer account list with pagination, account type validation, balance/rate calculations, FK relationship to customer table, error handling for missing accounts/customers.",
            "validation_mechanism": "JaCoCo reports 90%+ branch coverage for account read operations, integration tests verify correct FK joins, pagination tests validate limit/offset logic",
            "estimated_hours": 8,
            "deliverables": ["src/test/java/com/cbsa/migration/service/AccountReadServiceTest.java", "src/test/resources/fixtures/account_read_fixtures.json"]
        },
        {
            "id": "validator_004",
            "title": "Create Account CRUD Test Suite",
            "content": "Build test suite for CREACC, UPDACC, DELACC operations with account type validation and balance constraints",
            "status": "pending",
            "depends_on": ["validator_003"],
            "action": "Create AccountCrudServiceTest.java covering account creation with FK validation to customer, account updates preserving balance constraints, account deletion with transaction history checks. Test account type validation, interest rate updates, overdraft limit modifications.",
            "definition_of_done": "All CRUD paths tested with 95%+ coverage: account creation requires valid customer FK, updates maintain balance integrity, deletion blocks if transaction history exists, account type constraints enforced, concurrent update handling with optimistic locking.",
            "validation_mechanism": "JaCoCo shows 95%+ coverage, FK constraint tests verify customer existence, balance constraint tests prevent invalid states, deletion tests check transaction FK dependencies",
            "estimated_hours": 12,
            "deliverables": ["src/test/java/com/cbsa/migration/service/AccountCrudServiceTest.java", "src/test/resources/fixtures/account_crud_fixtures.json"]
        },
        {
            "id": "validator_005",
            "title": "Create Transaction Test Suite",
            "content": "Build test suite for DBCRFUN (debit/credit) and XFRFUN (transfer) operations with focus on transaction integrity and PROCTRAN logging",
            "status": "pending",
            "depends_on": ["setup_002"],
            "action": "Create TransactionServiceTest.java covering DBCRFUN deposit/withdrawal with DB2 account balance updates and PROCTRAN logging. Test XFRFUN transfers between accounts with dual balance updates. Test overdraft prevention, insufficient funds handling, transaction atomicity.",
            "definition_of_done": "All transaction scenarios tested with 95%+ coverage: deposits update balance and log to PROCTRAN, withdrawals check sufficient funds, transfers update both accounts atomically, overdraft limits enforced, transaction history maintains composite PK (sort_code, account_number, date, time, ref_number).",
            "validation_mechanism": "JaCoCo shows 95%+ coverage, transaction tests verify ACID properties with @Transactional, rollback tests ensure balance consistency, PROCTRAN logging tests verify all fields populated",
            "estimated_hours": 10,
            "deliverables": ["src/test/java/com/cbsa/migration/service/TransactionServiceTest.java", "src/test/resources/fixtures/transaction_fixtures.json", "src/test/resources/db/proctran_test_data.sql"]
        },
        {
            "id": "validator_006",
            "title": "Create Credit Agency Test Suite",
            "content": "Build test suite for CRDTAGY2-5 credit agency programs consolidation into single service (all identical to CRDTAGY1 with random delay 0-3s and credit score 1-999)",
            "status": "pending",
            "depends_on": ["setup_002"],
            "action": "Create CreditAgencyConsolidatedServiceTest.java extending existing CreditAgencyService patterns. Test random delay simulation (0-3 seconds), credit score generation (1-999 range), customer record updates via repository. Test consolidation of CRDTAGY2-5 into single service with agency identifier parameter.",
            "definition_of_done": "Test suite covers consolidated credit agency service with 90%+ coverage: delay simulation tests, score generation distribution tests, customer update tests, agency identifier routing tests, async call simulation matching CRECUST usage patterns.",
            "validation_mechanism": "JaCoCo shows 90%+ coverage, delay tests verify 0-3 second range, score tests verify 1-999 distribution, update tests mock CustomerRepository, consolidation tests verify agency parameter routing",
            "estimated_hours": 8,
            "deliverables": ["src/test/java/com/cbsa/migration/service/CreditAgencyConsolidatedServiceTest.java", "src/test/resources/fixtures/credit_agency_fixtures.json"]
        },
        {
            "id": "validator_007",
            "title": "Create E2E Customer Lifecycle Tests",
            "content": "Build end-to-end test suite covering complete customer lifecycle workflows from creation through deletion",
            "status": "pending",
            "depends_on": ["migrate_001", "migrate_002", "migrate_003"],
            "action": "Create CustomerLifecycleE2ETest.java using @SpringBootTest with full application context. Test complete workflows: create customer with credit check → inquire customer → update details → delete customer. Verify data consistency across operations, test error handling in multi-step workflows.",
            "definition_of_done": "E2E tests validate complete customer lifecycle with data integrity checks at each step: creation populates all fields including credit_score from async call, inquiry returns consistent data, updates preserve immutable fields, deletion cascades properly or blocks on FK constraints.",
            "validation_mechanism": "All E2E scenarios pass, database state verified after each operation, transaction boundaries tested across workflow steps, error recovery scenarios validated",
            "estimated_hours": 8,
            "deliverables": ["src/test/java/com/cbsa/migration/e2e/CustomerLifecycleE2ETest.java", "docs/customer_lifecycle_workflows.md"]
        },
        {
            "id": "validator_008",
            "title": "Create E2E Account-Transaction Tests",
            "content": "Build end-to-end test suite covering account and transaction workflows with multi-account scenarios",
            "status": "pending",
            "depends_on": ["migrate_004", "migrate_005", "migrate_006"],
            "action": "Create AccountTransactionE2ETest.java with full Spring Boot context. Test workflows: create customer → create account → deposit → withdraw → transfer between accounts → inquiry balances → delete account. Test transaction history integrity, balance calculations across operations.",
            "definition_of_done": "E2E tests validate complete account-transaction workflows: account creation with FK to customer, transactions update balances atomically, transfers maintain zero-sum property, PROCTRAN history complete, account deletion checks transaction dependencies.",
            "validation_mechanism": "All E2E scenarios pass, balance consistency verified throughout workflow, transaction history maintains referential integrity, zero-sum property validated for transfers",
            "estimated_hours": 8,
            "deliverables": ["src/test/java/com/cbsa/migration/e2e/AccountTransactionE2ETest.java", "docs/account_transaction_workflows.md"]
        },
        
        {
            "id": "migrate_001",
            "title": "Migrate Customer Read Operations (INQCUST)",
            "content": "Implement customer inquiry service and REST endpoints based on INQCUST COBOL program (~712 lines) with retry logic and dual VSAM/DB2 read capability",
            "status": "pending",
            "depends_on": ["setup_001", "setup_002", "validator_001"],
            "action": "Create CustomerInquiryService.java implementing INQCUST business logic using CustomerRepository. Handle customer lookup by sort_code + customer_number composite key. Implement retry logic from COBOL. Create CustomerInquiryController.java with GET endpoint. Use validator_001 tests to verify correctness.",
            "definition_of_done": "Service and controller implemented with all INQCUST functionality: customer lookup, not found handling, retry logic, proper error responses. All validator_001 tests pass. JaCoCo reports 90%+ branch coverage for service layer, 60%+ for controller layer.",
            "validation_mechanism": "validator_001 test suite passes (CustomerReadServiceTest.java), JaCoCo coverage meets thresholds (Service 80%/70% branches, Controller 60%), integration tests verify database reads, performance within 10% of baseline from setup_001",
            "estimated_hours": 8,
            "deliverables": ["src/main/java/com/cbsa/migration/service/CustomerInquiryService.java", "src/main/java/com/cbsa/migration/controller/CustomerInquiryController.java", "src/main/java/com/cbsa/migration/dto/CustomerInquiryResponse.java"]
        },
        {
            "id": "migrate_002",
            "title": "Migrate Customer Create Operation (CRECUST)",
            "content": "Implement customer creation service based on CRECUST COBOL program (~1440 lines) with async credit check integration, named counter management, and DB2 SQL operations",
            "status": "pending",
            "depends_on": ["setup_001", "setup_002", "validator_002", "validator_006", "migrate_007"],
            "action": "Create CustomerCreationService.java implementing CRECUST business logic with async credit agency calls using consolidated credit service. Implement named counter management for customer_number generation. Implement date validation (year >= 1601, age <= 150, no future dates, fail codes 'O'/'Y'). Create CustomerCreationController.java with POST endpoint. Use validator_002 tests to verify correctness.",
            "definition_of_done": "Service and controller implemented with all CRECUST functionality: customer creation with all fields, async credit score retrieval via consolidated credit agency service, counter-based customer_number generation, date validation matching COBOL rules, DB2 transaction handling, proper error responses. All validator_002 tests pass.",
            "validation_mechanism": "validator_002 test suite passes (CustomerCrudServiceTest.java creation scenarios), JaCoCo coverage meets thresholds, date validation tests verify COBOL rule compliance (1601+ year, 150 max age, future date rejection), async credit check integration verified",
            "estimated_hours": 12,
            "deliverables": ["src/main/java/com/cbsa/migration/service/CustomerCreationService.java", "src/main/java/com/cbsa/migration/controller/CustomerCreationController.java", "src/main/java/com/cbsa/migration/dto/CustomerCreationRequest.java", "src/main/java/com/cbsa/migration/validator/DateOfBirthValidator.java"]
        },
        {
            "id": "migrate_003",
            "title": "Migrate Customer Update/Delete Operations (UPDCUST, DELCUS)",
            "content": "Implement customer update and delete services based on UPDCUST (~365 lines) and DELCUS COBOL programs with field-level update restrictions and FK constraint handling",
            "status": "pending",
            "depends_on": ["setup_001", "setup_002", "validator_002", "migrate_001"],
            "action": "Create CustomerUpdateService.java implementing UPDCUST limited field modification (only modifiable fields updated, immutable fields preserved). Create CustomerDeletionService.java implementing DELCUS with referential integrity checks. Add PUT and DELETE endpoints to CustomerController. Use validator_002 tests to verify correctness.",
            "definition_of_done": "Update service enforces field-level restrictions from UPDCUST (limited modifiable fields), update does not write to PROCTRAN per COBOL spec. Delete service checks FK constraints to account table, blocks deletion if accounts exist or cascade as appropriate. All validator_002 update/delete tests pass.",
            "validation_mechanism": "validator_002 test suite passes (CustomerCrudServiceTest.java update/delete scenarios), JaCoCo coverage meets thresholds, field restriction tests verify only allowed fields updated, FK constraint tests prevent orphaned records",
            "estimated_hours": 8,
            "deliverables": ["src/main/java/com/cbsa/migration/service/CustomerUpdateService.java", "src/main/java/com/cbsa/migration/service/CustomerDeletionService.java", "src/main/java/com/cbsa/migration/dto/CustomerUpdateRequest.java"]
        },
        {
            "id": "migrate_004",
            "title": "Migrate Account Read Operations (INQACC, INQACCCU)",
            "content": "Implement account inquiry services for single account lookup (INQACC) and customer account list (INQACCCU) with proper FK joins and pagination",
            "status": "pending",
            "depends_on": ["setup_001", "setup_002", "validator_003"],
            "action": "Create AccountInquiryService.java implementing INQACC (single account by sort_code + account_number) and INQACCCU (all accounts for customer with pagination). Use AccountRepository with proper FK joins to customer table. Create AccountInquiryController.java with GET endpoints. Use validator_003 tests to verify correctness.",
            "definition_of_done": "Services and endpoints implemented for both inquiry types: single account lookup with full details (type, balance, rates), customer account list with pagination support, FK validation to customer, proper not-found error handling. All validator_003 tests pass.",
            "validation_mechanism": "validator_003 test suite passes (AccountReadServiceTest.java), JaCoCo coverage meets thresholds, pagination tests verify limit/offset logic, FK join tests verify customer relationship, performance within baseline",
            "estimated_hours": 8,
            "deliverables": ["src/main/java/com/cbsa/migration/service/AccountInquiryService.java", "src/main/java/com/cbsa/migration/controller/AccountInquiryController.java", "src/main/java/com/cbsa/migration/dto/AccountInquiryResponse.java", "src/main/java/com/cbsa/migration/dto/CustomerAccountsResponse.java"]
        },
        {
            "id": "migrate_005",
            "title": "Migrate Account CRUD Operations (CREACC, UPDACC, DELACC)",
            "content": "Implement account creation, update, and deletion services with account type validation, balance constraints, and transaction history checks",
            "status": "pending",
            "depends_on": ["setup_001", "setup_002", "validator_004", "migrate_001"],
            "action": "Create AccountCreationService.java implementing CREACC with FK validation to customer. Create AccountUpdateService.java implementing UPDACC with balance constraint preservation. Create AccountDeletionService.java implementing DELACC with transaction history dependency checks. Create AccountController.java with POST/PUT/DELETE endpoints. Use validator_004 tests to verify correctness.",
            "definition_of_done": "All CRUD operations implemented: creation validates customer FK exists, updates maintain balance integrity and account type constraints, deletion checks transaction table FK dependencies. All validator_004 tests pass. Transaction handling ensures data consistency.",
            "validation_mechanism": "validator_004 test suite passes (AccountCrudServiceTest.java), JaCoCo coverage meets thresholds, FK tests verify customer validation, balance constraint tests prevent invalid states, deletion FK tests check transaction dependencies",
            "estimated_hours": 12,
            "deliverables": ["src/main/java/com/cbsa/migration/service/AccountCreationService.java", "src/main/java/com/cbsa/migration/service/AccountUpdateService.java", "src/main/java/com/cbsa/migration/service/AccountDeletionService.java", "src/main/java/com/cbsa/migration/controller/AccountController.java", "src/main/java/com/cbsa/migration/dto/AccountCreationRequest.java", "src/main/java/com/cbsa/migration/dto/AccountUpdateRequest.java"]
        },
        {
            "id": "migrate_006",
            "title": "Migrate Transaction Operations (DBCRFUN, XFRFUN)",
            "content": "Implement debit/credit and transfer services based on DBCRFUN (~862 lines) and XFRFUN COBOL programs with PROCTRAN logging and transaction atomicity",
            "status": "pending",
            "depends_on": ["setup_001", "setup_002", "validator_005", "migrate_004"],
            "action": "Create TransactionService.java implementing DBCRFUN deposit/withdrawal logic with DB2 account balance updates and PROCTRAN logging. Implement XFRFUN transfer logic with dual account updates. Use TransactionRepository for PROCTRAN composite PK (sort_code, account_number, date, time, ref_number). Create TransactionController.java with POST endpoints. Use validator_005 tests to verify correctness.",
            "definition_of_done": "Transaction operations implemented with full ACID compliance: deposits/withdrawals update account balance and log to transaction table, transfers update both accounts atomically, overdraft limits enforced, insufficient funds handling, PROCTRAN composite PK maintained. All validator_005 tests pass.",
            "validation_mechanism": "validator_005 test suite passes (TransactionServiceTest.java), JaCoCo coverage meets thresholds, transaction atomicity tests verify @Transactional rollback, PROCTRAN logging tests verify composite PK and all fields, zero-sum tests validate transfers",
            "estimated_hours": 12,
            "deliverables": ["src/main/java/com/cbsa/migration/service/TransactionService.java", "src/main/java/com/cbsa/migration/controller/TransactionController.java", "src/main/java/com/cbsa/migration/dto/DepositRequest.java", "src/main/java/com/cbsa/migration/dto/WithdrawalRequest.java", "src/main/java/com/cbsa/migration/dto/TransferRequest.java"]
        },
        {
            "id": "migrate_007",
            "title": "Migrate Remaining Credit Agency Programs (CRDTAGY2-5)",
            "content": "Consolidate CRDTAGY2-5 COBOL programs (each ~274 lines, identical to CRDTAGY1) into single CreditAgencyConsolidatedService with agency identifier parameter",
            "status": "pending",
            "depends_on": ["setup_001", "setup_002", "validator_006"],
            "action": "Extend existing CreditAgencyService.java to support agency identifier parameter for routing to CRDTAGY1-5 equivalent logic. Since all 5 programs are identical (random delay 0-3s, credit score 1-999), implement single consolidated service with agency_id parameter. Update CreditAgencyController.java to accept agency identifier. Use validator_006 tests to verify correctness.",
            "definition_of_done": "Consolidated credit agency service supports all 5 CRDTAGY programs via agency identifier: random delay simulation (0-3 seconds), credit score generation (1-999), customer record updates via repository, agency routing parameter. All validator_006 tests pass.",
            "validation_mechanism": "validator_006 test suite passes (CreditAgencyConsolidatedServiceTest.java), JaCoCo coverage meets thresholds, delay tests verify 0-3s range, score distribution tests verify 1-999 range, agency routing tests verify parameter handling",
            "estimated_hours": 6,
            "deliverables": ["src/main/java/com/cbsa/migration/service/CreditAgencyConsolidatedService.java (enhanced)", "src/main/java/com/cbsa/migration/dto/CreditCheckRequest.java"]
        },
        {
            "id": "migrate_008",
            "title": "E2E Integration Testing and Performance Validation",
            "content": "Execute end-to-end integration testing across all migrated services and validate performance against baseline metrics from setup_001",
            "status": "pending",
            "depends_on": ["migrate_001", "migrate_002", "migrate_003", "migrate_004", "migrate_005", "migrate_006", "migrate_007", "validator_007", "validator_008"],
            "action": "Execute validator_007 and validator_008 E2E test suites against fully migrated system. Run performance tests comparing Spring Boot services against COBOL baseline from setup_001. Verify all JaCoCo coverage thresholds met across layers. Generate final migration report with coverage metrics, performance comparison, and completeness checklist.",
            "definition_of_done": "All E2E tests pass (validator_007 CustomerLifecycleE2ETest, validator_008 AccountTransactionE2ETest), performance within 10% of COBOL baseline for P50/P95/P99 latencies, JaCoCo overall coverage >= 50%, layer-specific thresholds met (Service 80%, Repository 70%, Controller 60%), all 14 COBOL programs migrated and tested.",
            "validation_mechanism": "E2E test suites pass with 100% success rate, performance test report shows <10% deviation from baseline, JaCoCo aggregate report meets all thresholds, migration completeness checklist verified (29/29 programs accounted for: 5 migrated + 9 UI completed + 14 newly migrated + 1 consolidated)",
            "estimated_hours": 10,
            "deliverables": ["docs/migration_completion_report.md", "tests/performance/comparison_report.json", "jacoco-aggregate-report.xml", "docs/MIGRATION_CHECKLIST.md"]
        }
    ]
}
